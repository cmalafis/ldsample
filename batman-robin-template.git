---
# Repo structure for a GPU-enabled Podman + GitLab CI/CD + Clair scanning pipeline
# Apps: Batman and Robin

# Directory Layout:
# batman-robin-deploy-template/
# ├── apps/
# │   ├── batman/
# │   │   ├── Containerfile
# │   │   ├── podman-compose.yaml
# │   │   └── systemd-batman.service
# │   └── robin/
# │       ├── Containerfile
# │       ├── podman-compose.yaml
# │       └── systemd-robin.service
# ├── clair-stack/
# │   ├── podman-compose.yaml
# │   └── clair-config.yaml
# └── .gitlab-ci.yml

############### apps/batman/Containerfile ###############
FROM registry.access.redhat.com/ubi9/ubi
RUN dnf install -y python3 nvidia-container-toolkit && dnf clean all
COPY . /app
WORKDIR /app
CMD ["python3", "main.py"]

############### apps/batman/podman-compose.yaml ###############
version: "3.8"
services:
  batman:
    build:
      context: .
      dockerfile: Containerfile
    image: batman:latest
    container_name: batman
    restart: always
    volumes:
      - ./data:/app/data
    devices:
      - "/dev/nvidia0:/dev/nvidia0"
      - "/dev/nvidiactl:/dev/nvidiactl"
      - "/dev/nvidia-modeset:/dev/nvidia-modeset"
      - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility

############### apps/batman/systemd-batman.service ###############
[Unit]
Description=Batman Podman Compose Service
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/apps/batman
ExecStart=/usr/bin/podman-compose up
ExecStop=/usr/bin/podman-compose down
Restart=always

[Install]
WantedBy=multi-user.target

############### apps/robin/Containerfile ###############
FROM registry.access.redhat.com/ubi9/ubi
RUN dnf install -y python3 nvidia-container-toolkit && dnf clean all
COPY . /app
WORKDIR /app
CMD ["python3", "main.py"]

############### apps/robin/podman-compose.yaml ###############
version: "3.8"
services:
  robin:
    build:
      context: .
      dockerfile: Containerfile
    image: robin:latest
    container_name: robin
    restart: always
    volumes:
      - ./data:/app/data
    devices:
      - "/dev/nvidia0:/dev/nvidia0"
      - "/dev/nvidiactl:/dev/nvidiactl"
      - "/dev/nvidia-modeset:/dev/nvidia-modeset"
      - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility

############### apps/robin/systemd-robin.service ###############
[Unit]
Description=Robin Podman Compose Service
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/apps/robin
ExecStart=/usr/bin/podman-compose up
ExecStop=/usr/bin/podman-compose down
Restart=always

[Install]
WantedBy=multi-user.target

############### clair-stack/podman-compose.yaml ###############
version: "3.8"
services:
  clair:
    image: quay.io/projectquay/clair:v4.7.2
    container_name: clair
    volumes:
      - ./clair-config.yaml:/clair/config.yaml:ro
    ports:
      - "6060:6060"
      - "6061:6061"
  db:
    image: docker.io/library/postgres:14
    container_name: clair-db
    environment:
      POSTGRES_USER: clair
      POSTGRES_PASSWORD: clairpass
      POSTGRES_DB: clair
    volumes:
      - pgdata:/var/lib/postgresql/data
volumes:
  pgdata:

############### clair-stack/clair-config.yaml ###############
# Basic Clair config (can be expanded)
database:
  connectionString: host=clair-db port=5432 dbname=clair user=clair password=clairpass sslmode=disable

matcher:
  indexer:
    enabled: true

notifier:
  enabled: false

indexer:
  layer_scan_concurrency: 5

api:
  port: 6060
  health:
    interval: 10s

############### .gitlab-ci.yml ###############
stages:
  - test
  - build
  - scan
  - deploy

variables:
  IMAGE_TAG: "registry.local/batman:latest"

build:
  stage: build
  image: quay.io/buildah/stable
  script:
    - cd apps/batman && buildah bud -t $IMAGE_TAG -f Containerfile .
    - buildah push $IMAGE_TAG

scan:
  stage: scan
  image: quay.io/projectquay/clairctl:latest
  script:
    - clairctl report $IMAGE_TAG --format json --output clair-report.json
    - jq '.vulnerabilities | length' clair-report.json
    - |
      if [[ $(jq '.vulnerabilities | length' clair-report.json) -gt 0 ]]; then
        echo "CVEs found in image!"
        exit 1
      fi

deploy:
  stage: deploy
  script:
    - cd apps/batman && sudo systemctl restart systemd-batman.service

